import { ExternalLink } from "@navikt/ds-icons";
import { BodyShort, Heading } from "@navikt/ds-react";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useContext } from "react";
import { useMedia } from "react-use";
import styled from "styled-components";
import {
  Changelog,
  CodeExample,
  LastUpdateTag,
  LevelTwoHeading,
  StatusTag,
  Tab,
  TableOfContents,
  Tabs,
} from "../..";
import {
  DsChangelog,
  DsCodeExample,
  DsComponentPage,
} from "../../../lib/autogen-types";
import { PagePropsContext } from "../../../pages/_app";
import { SanityBlockContent } from "../../SanityBlockContent";
import * as S from "./page.styles";

const ScLinks = styled.div`
  display: flex;
  column-gap: 0.25rem;
  flex-wrap: wrap;

  margin-left: var(--navds-spacing-4);
  right: 0;
  top: 0;

  a {
    text-decoration: none;
    color: var(--navds-color-darkgray);
    padding: calc(0.75rem + 2px) 0.25rem;
    transition: box-shadow 100ms;
    justify-content: center;
    display: flex;
    gap: 0.25rem;

    :hover {
      text-decoration: underline;
      background: var(--navds-color-blue-10);
    }

    :focus {
      outline: none;
      box-shadow: 0 0 0 3px var(--navds-color-blue-80);
    }

    :active {
      background-color: var(--navds-color-blue-80);
      color: white;
    }
  }
`;

const ScDiv = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: var(--navds-spacing-2);
  justify-content: flex-start;
`;

const MarginTop = styled.div`
  margin-top: 3rem;
`;

const ComponentPageTemplate = ({
  data,
  changelogs,
}: {
  data: DsComponentPage;
  changelogs: DsChangelog[];
}): JSX.Element => {
  const { query } = useRouter();
  const changeTab = useMedia("(max-width: 564px)");
  const { pageProps } = useContext(PagePropsContext);

  const basePath = `/designsystem/${(query.slug as string[])
    .slice(0, 2)
    .join("/")}`;

  const tabs = {
    bruk: "usage",
    design: "design",
    utvikling: "development",
    tilgjengelighet: "accessibility",
  };

  const activeTab = query.slug[2] ?? "bruk";

  // TODO: Simplify this atrocity
  const installSnippetTabs: DsCodeExample | undefined =
    data?.linked_packages && {
      _type: "ds_code_example",
      title: `Install-snippet for ${data.heading}`,
      _id: `Install-snippet-for-${data.heading}`,
      preview: null,
      autogenerated: false,
      infercode: false,
      _createdAt: new Date().toString(),
      _updatedAt: new Date().toString(),
      _rev: new Date().toString(),
      tabs: [
        {
          _key: "Install snippet yarn",
          _type: "code_example_example",
          title: "Yarn",
          example: {
            language: "bash",
            code: `yarn install ${((data as any)?.linked_packages)
              .map((x) => x.title)
              .join(" ")}`,
          },
        },
        {
          _key: "Install snippet npm",
          _type: "code_example_example",
          title: "Npm",
          example: {
            language: "bash",
            code: `npm add ${((data as any)?.linked_packages)
              .map((x) => x.title)
              .join(" ")}`,
          },
        },
      ],
    };

  return (
    <>
      <Head>
        <>
          <title>
            {pageProps?.page?.heading
              ? `${pageProps?.page?.heading} - Designsystemet`
              : "Designsystemet"}
          </title>
          <meta
            property="og:title"
            content={`${data.heading} - Designsystemet`}
          />
        </>
      </Head>

      <S.MaxWidthContainer>
        <S.HeadingContainer>
          <Heading size="2xlarge" level="1" spacing>
            {data.heading}
          </Heading>
          <ScDiv>
            <S.Inline>
              <StatusTag status={data.status} />
              <LastUpdateTag date={data?.metadata?.last_update} />
            </S.Inline>
            <ScLinks>
              {data.npm_link && (
                <BodyShort size="small" as="a" href={data.npm_link}>
                  NPM
                  <ExternalLink aria-label="Gå til NPM pakke" />
                </BodyShort>
              )}
              {data.github_link && (
                <BodyShort size="small" as="a" href={data.github_link}>
                  Github
                  <ExternalLink aria-label="Gå til github-kode" />
                </BodyShort>
              )}
              {data.figma_link && (
                <BodyShort size="small" as="a" href={data.figma_link}>
                  Figma
                  <ExternalLink aria-label="Åpne i Figma" />
                </BodyShort>
              )}
            </ScLinks>
          </ScDiv>
        </S.HeadingContainer>
        {data.ingress && <SanityBlockContent isIngress blocks={data.ingress} />}
      </S.MaxWidthContainer>

      <Tabs>
        {Object.entries(tabs).map(
          ([key, value]) =>
            data[value] && (
              <Tab
                key={key}
                path={`${basePath}${key === "bruk" ? "" : "/" + key}`}
              >
                {changeTab ? (key === "tilgjengelighet" ? "UU" : key) : key}
              </Tab>
            )
        )}
      </Tabs>
      <S.SanityBlockContainer>
        <TableOfContents changedState={query.slug} />
        <S.MaxWidthContainer>
          {activeTab === "utvikling" && installSnippetTabs && (
            <MarginTop>
              <LevelTwoHeading>Installasjon</LevelTwoHeading>
              <CodeExample node={installSnippetTabs} />
            </MarginTop>
          )}
          {data[tabs[activeTab]] && (
            <SanityBlockContent withMargin blocks={data[tabs[activeTab]]} />
          )}
          {activeTab === "utvikling" && (
            <Changelog changelogs={changelogs} id={data._id} />
          )}
        </S.MaxWidthContainer>
      </S.SanityBlockContainer>
    </>
  );
};

export default ComponentPageTemplate;
