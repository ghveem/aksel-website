/// <reference types="@sanity-codegen/types" />

declare namespace SanityT {
  namespace Schema {
    /**
     * Forside
     */
    interface vk_frontpage extends Sanity.Document {
      _type: "vk_frontpage";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Beskrivelse - `RegistryReference`
       */
      beskrivelse?: riktekst;

      /**
       * Brukeropplevelse - `Object`
       */
      prinsipp_1?: {
        /**
         * Vis på forside - `Boolean`
         */
        vis?: boolean;

        /**
         * Beskrivelse - `RegistryReference`
         */
        beskrivelse?: riktekst;

        /**
         * Hovedside - `Reference`
         */
        hovedside?: Sanity.Reference<aksel_prinsipp>;

        /**
       * Undersider - `Array`
Rekkefølge bestemmer rekkefølgen på forsiden!
       */
        undersider?: Array<Sanity.KeyedReference<aksel_prinsipp>>;
      };
    }

    /**
     * Team
     */
    interface team extends Sanity.Document {
      _type: "team";

      /**
       * Navn - `String`
       */
      title?: string;
    }

    /**
     * Redaktører
     */
    interface editor extends Sanity.Document {
      _type: "editor";

      /**
       * Navn - `String`
       */
      title?: string;

      /**
       * Team - `Array`
       */
      teams?: Array<Sanity.KeyedReference<team>>;

      /**
       * Sanity bruker-id - `Slug`
       */
      user_id?: {
        _type: "user_id";
        current: string;
      };

      /**
       * Profil - `String`
       */
      profile_page?: string;
    }

    /**
     * Navigation
     */
    interface navigation extends Sanity.Document {
      _type: "navigation";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Sidemeny - `Array`
Linker eller dropdowns med linker. Maks dybde på 2 dropdowns er støttet. Sider må være publisert før de kan linkes her.
       */
      sidemenu?: Array<
        Sanity.Keyed<navigation_dropdown> | Sanity.Keyed<navigation_link>
      >;
    }

    /**
     * Velkommen!
     */
    interface introduction extends Sanity.Document {
      _type: "introduction";

      /**
       * Navn - `String`
       */
      title?: string;

      /**
       * Intro - `String`
       */
      view?: string;
    }

    /**
     * Changelog
     */
    interface ds_changelog extends Sanity.Document {
      _type: "ds_changelog";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Dato - `Date`
Endringer sortes basert på datoen gitt her
       */
      change_date?: string;

      /**
       * Pull request (optional) - `Url`
Eks: https://github.com/navikt/nav-frontend-moduler/pull/1382
       */
      pull_request?: string;

      /**
       * Pakker og versioner - `Array`
       */
      packages?: Array<
        Sanity.Keyed<{
          _type: "package_versions";

          /**
           * Pakke - `Reference`
           */
          pack?: Sanity.Reference<ds_package>;

          /**
           * Semver versjon - `String`
           */
          version?: string;
        }>
      >;

      /**
       * Type endring - `String`
       */
      change?: "new" | "bug" | "breaking" | "uu" | "fix";

      /**
       * Tags - `Array`
Eks: Button, Alert, All etc
       */
      tags?: Array<Sanity.Keyed<string>>;

      /**
       * Tekst - `RegistryReference`
Beskrivelse av endringen
       */
      body?: riktekst;
    }

    /**
     * Kode med eksempel
     */
    interface ds_code_example extends Sanity.Document {
      _type: "ds_code_example";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Lenke til eksempel - `Url`
Alle eksempler kan finnes under /examples på nettsiden
       */
      preview?: string;

      /**
       * Hent kode automatisk fra selve eksemplet? - `Boolean`
Prøver å hente React og HTML kode automatisk fra storybook
       */
      infercode?: boolean;

      /**
       * Setter om koden er autegenerert - `Boolean`
       */
      autogenerated?: boolean;

      /**
       * Kode - `Array`
       */
      tabs?: Array<Sanity.Keyed<code_example_example>>;

      /**
       * Lenke til github-kode (optional) - `Url`
       */
      github?: string;
    }

    /**
     * Sandbox for komponent
     */
    interface ds_code_sandbox extends Sanity.Document {
      _type: "ds_code_sandbox";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Sier om navnet er autegenerert - `Boolean`
       */
      autogenerated?: boolean;
    }

    /**
     * Fargekategori
     */
    interface ds_color_categories extends Sanity.Document {
      _type: "ds_color_categories";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Beskrivelse - `RegistryReference`
       */
      description?: riktekst_enkel;

      /**
       * Farger - `Array`
       */
      colors?: Array<Sanity.Keyed<ds_color>>;
    }

    /**
     * Tokens
     */
    interface ds_tokens extends Sanity.Document {
      _type: "ds_tokens";

      /**
       * Navn - `String`
       */
      title?: string;

      /**
       * Verdi - `String`
       */
      token?: string;

      /**
       * Faktisk verdi - `String`
       */
      raw?: string;

      /**
       * Parent - `String`
       */
      parent?: string;

      /**
       * Beskrivelse - `String`
       */
      beskrivelse?: string;

      /**
       * Autogenerert - `Boolean`
       */
      autogenerated?: boolean;
    }

    /**
     * Autogenerert Propdata
     */
    interface ds_props extends Sanity.Document {
      _type: "ds_props";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Displayname - `String`
       */
      displayname?: string;

      /**
       * Filepath - `String`
       */
      filepath?: string;

      /**
       * props - `Array`
       */
      proplist?: Array<
        Sanity.Keyed<{
          _type: "prop";

          /**
           * Name - `String`
           */
          name?: string;

          /**
           * DefaultValue - `String`
           */
          defaultValue?: string;

          /**
           * Description - `String`
           */
          description?: string;

          /**
           * Required - `Boolean`
           */
          required?: boolean;

          /**
           * Type - `String`
           */
          type?: string;

          /**
           * isRef - `Boolean`
           */
          ref?: boolean;
        }>
      >;
    }

    /**
     * Komponentartikkel
     */
    interface ds_component_page extends Sanity.Document {
      _type: "ds_component_page";

      /**
       * Redaktører - `Array`
Legg til alle som har bidratt med denne siden!
       */
      contributors?: Array<Sanity.KeyedReference<editor>>;

      /**
       * Sidetittel - `String`
Bruk en kort og konsis tittel om mulig. Blir satt som `<H1 />` på toppen av siden i URL.
       */
      heading?: string;

      /**
       * url - `Slug`
       */
      slug?: {
        _type: "slug";
        current: string;
      };

      /**
       * Bruk-tab - `RegistryReference`
       */
      usage?: blockContent;

      /**
       * Design-tab - `RegistryReference`
       */
      design?: blockContent;

      /**
       * Utvikling-tab - `RegistryReference`
       */
      development?: blockContent;

      /**
       * Tilgjengelighet-tab - `RegistryReference`
       */
      accessibility?: blockContent;

      /**
       * Koblet kodepakke - `Reference`
Kobler komponenten til en pakke
       */
      linked_package?: Sanity.Reference<ds_package>;

      /**
       * Figma lenke (optional) - `Url`
       */
      figma_link?: string;
    }

    /**
     * Komponentartikkel-template
     */
    interface ds_component_template extends Sanity.Document {
      _type: "ds_component_template";

      /**
       * Redaktører - `Array`
Legg til alle som har bidratt med denne siden!
       */
      contributors?: Array<Sanity.KeyedReference<editor>>;

      /**
       * Sidetittel - `String`
Bruk en kort og konsis tittel om mulig. Blir satt som `<H1 />` på toppen av siden i URL.
       */
      heading?: string;

      /**
       * url - `Slug`
       */
      slug?: {
        _type: "slug";
        current: string;
      };

      /**
       * Bruk - `Array`
       */
      content_bruk?: Array<
        | Sanity.Keyed<generisk_seksjon>
        | Sanity.Keyed<intro_komponent_seksjon>
        | Sanity.Keyed<live_demo_seksjon>
        | Sanity.Keyed<uu_seksjon>
        | Sanity.Keyed<anatomi_seksjon>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
      >;

      /**
       * Kode - `Array`
       */
      content_kode?: Array<
        | Sanity.Keyed<generisk_seksjon>
        | Sanity.Keyed<installasjon_seksjon>
        | Sanity.Keyed<props_seksjon>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
      >;

      /**
       * Koblet kodepakke - `Reference`
Kobler komponenten til en pakke
       */
      linked_package?: Sanity.Reference<ds_package>;

      /**
       * Figma lenke (optional) - `Url`
       */
      figma_link?: string;
    }

    /**
     * Forside
     */
    interface ds_frontpage extends Sanity.Document {
      _type: "ds_frontpage";

      /**
       * Innhold - `RegistryReference`
       */
      body?: riktekst_enkel;

      /**
       * Cards - `Array`
       */
      cards?: Array<
        Sanity.Keyed<{
          _type: "card";

          /**
           * Lenke - `Reference`
           */
          link_ref?: Sanity.Reference<
            ds_component_page | komponent_artikkel | ds_artikkel
          >;

          /**
           * Tittel - `String`
           */
          title?: string;

          /**
           * Innhold - `String`
           */
          content?: string;
        }>
      >;
    }

    /**
     * Hovedkategorier
     */
    interface main_categories extends Sanity.Document {
      _type: "main_categories";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Nivå - `String`
       */
      level?: "top" | "designsystem";

      /**
       * Pictogram - `Image`
       */
      picture?: {
        asset: Sanity.Asset;
        crop?: Sanity.ImageCrop;
        hotspot?: Sanity.ImageHotspot;

        /**
       * Alt-tekst - `String`
Beskriv bildet for skjermlesere
       */
        title?: string;
      };
    }

    /**
     * Navigation
     */
    interface ds_navigation extends Sanity.Document {
      _type: "ds_navigation";

      /**
       * Designsystem navigajsons-struktur - `String`
       */
      title?: string;

      /**
       * Header linker - `Array`
       */
      headings?: Array<Sanity.Keyed<ds_navigation_heading>>;
    }

    /**
     * Komponentoversikt
     */
    interface ds_component_overview extends Sanity.Document {
      _type: "ds_component_overview";

      /**
       * Komponent - `Array`
       */
      components?: Array<
        Sanity.Keyed<{
          _type: "component";

          /**
           * Komponentnavn - `String`
           */
          title?: string;

          /**
       * Pakkenavn - `Reference`
Kobler komponenten til en pakke og da om den er core/intern/navno. Alle tilgjengelige valg ligge under <Kodepakker>
       */
          linked_package?: Sanity.Reference<ds_package>;

          /**
           * Er komponenten ny? - `Boolean`
           */
          new?: boolean;

          /**
           * Er komponenten i Figma/designet? - `Boolean`
           */
          in_design?: boolean;

          /**
           * Figma bibliotek - `String`
           */
          figma_version?: "new" | "old" | "beta";

          /**
           * Er komponenten Kodet? - `Boolean`
           */
          in_code?: boolean;

          /**
           * Er komponenten fortsatt i Beta? - `Boolean`
           */
          in_code_beta?: boolean;

          /**
           * Er komponentkoden i synk med Figma? - `Boolean`
           */
          figma_sync?: boolean;

          /**
           * Er komponenten i dokumentert? - `Boolean`
           */
          in_doc?: boolean;

          /**
           * Legger til link til dokumentasjonen - `Reference`
           */
          doc_link?: Sanity.Reference<
            ds_component_page | komponent_artikkel | ds_artikkel
          >;
        }>
      >;
    }

    /**
     * Kodepakke
     */
    interface ds_package extends Sanity.Document {
      _type: "ds_package";

      /**
       * Navn - `String`
       */
      title?: string;

      /**
       * Status - `String`
       */
      status?: "beta" | "live" | "alpha";

      /**
       * Scope - `String`
       */
      scope?: "core" | "internal" | "navno";

      /**
       * Github-kode - `Url`
       */
      github_link?: string;
    }

    /**
     * Komponentartikkel (ny)
     */
    interface komponent_artikkel extends Sanity.Document {
      _type: "komponent_artikkel";

      /**
       * Redaktører - `Array`
Legg til alle som har bidratt med denne siden!
       */
      contributors?: Array<Sanity.KeyedReference<editor>>;

      /**
       * Sidetittel - `String`
Bruk en kort og konsis tittel om mulig. Blir satt som `<H1 />` på toppen av siden i URL.
       */
      heading?: string;

      /**
       * url - `Slug`
       */
      slug?: {
        _type: "slug";
        current: string;
      };

      /**
       * Bruk - `Array`
       */
      content_bruk?: Array<
        | Sanity.Keyed<generisk_seksjon>
        | Sanity.Keyed<intro_komponent_seksjon>
        | Sanity.Keyed<live_demo_seksjon>
        | Sanity.Keyed<uu_seksjon>
        | Sanity.Keyed<anatomi_seksjon>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
      >;

      /**
       * Kode - `Array`
       */
      content_kode?: Array<
        | Sanity.Keyed<generisk_seksjon>
        | Sanity.Keyed<installasjon_seksjon>
        | Sanity.Keyed<props_seksjon>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
      >;

      /**
       * Koblet kodepakke - `Reference`
Kobler komponenten til en pakke
       */
      linked_package?: Sanity.Reference<ds_package>;

      /**
       * Figma lenke (optional) - `Url`
       */
      figma_link?: string;
    }

    /**
     * Artikkel
     */
    interface ds_artikkel extends Sanity.Document {
      _type: "ds_artikkel";

      /**
       * Redaktører - `Array`
Legg til alle som har bidratt med denne siden!
       */
      contributors?: Array<Sanity.KeyedReference<editor>>;

      /**
       * Sidetittel - `String`
Bruk en kort og konsis tittel om mulig. Blir satt som `<H1 />` på toppen av siden i URL.
       */
      heading?: string;

      /**
       * url - `Slug`
       */
      slug?: {
        _type: "slug";
        current: string;
      };

      /**
       * Bruk Tabs - `Boolean`
       */
      artikkel_type?: boolean;

      /**
       * Innhold - `Array`
       */
      innhold?: Array<
        | Sanity.Keyed<generisk_seksjon>
        | Sanity.Keyed<{
            _type: "riktekst_blokk";

            /**
             * Riktekst - `RegistryReference`
             */
            body?: riktekst;
          }>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
        | Sanity.Keyed<spesial_seksjon>
      >;

      /**
       * Innhold i Tabs - `Array`
       */
      innhold_tabs?: Array<
        Sanity.Keyed<{
          _type: "tab";

          /**
       * Tittel - `String`
Innhold vil da legges under url/tab-tittel
       */
          title?: string;

          /**
           * Innhold - `Array`
           */
          innhold?: Array<
            | Sanity.Keyed<generisk_seksjon>
            | Sanity.Keyed<{
                _type: "riktekst_blokk";

                /**
                 * Riktekst - `RegistryReference`
                 */
                body?: riktekst;
              }>
            | Sanity.Keyed<tips>
            | Sanity.Keyed<relatert_innhold>
          >;
        }>
      >;

      /**
       * Tilbakemeldinger - `Object`
       */
      metadata_feedback?: {
        /**
       * Skjul artikkel feedback modul - `Boolean`
Gjemmer <<Var denne artikkelen til hjelp?>> modulen.
       */
        hide_feedback?: boolean;
      };
    }

    /**
     * Aksel Artikkel
     */
    interface aksel_artikkel extends Sanity.Document {
      _type: "aksel_artikkel";

      /**
       * Redaktører - `Array`
Legg til alle som har bidratt med denne siden!
       */
      contributors?: Array<Sanity.KeyedReference<editor>>;

      /**
       * Sidetittel - `String`
Bruk en kort og konsis tittel om mulig. Blir satt som `<H1 />` på toppen av siden i URL.
       */
      heading?: string;

      /**
       * url - `Slug`
       */
      slug?: {
        _type: "slug";
        current: string;
      };

      /**
       * Tema - `Array`
Legg til de viktigeste temaene
       */
      tema?: Array<Sanity.KeyedReference<aksel_tema>>;

      /**
       * Kort Intro/Oppsummering - `String`
Brukes i kort og innganger
       */
      oppsummering?: string;

      /**
       * Ingress - `String`
Side, innganger og seo description-tag
       */
      ingress?: string;

      /**
       * Innhold - `Array`
       */
      innhold?: Array<
        | Sanity.Keyed<generisk_seksjon_artikkel>
        | Sanity.Keyed<{
            _type: "riktekst_blokk";

            /**
             * Riktekst - `RegistryReference`
             */
            body?: riktekst;
          }>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
      >;

      /**
       * Under arbeid - `Boolean`
Hvis checked og publisert vil siden vises som under arbeid uten at lenker treffer 404
       */
      under_arbeid?: boolean;
    }

    /**
     * Blogg
     */
    interface aksel_blogg extends Sanity.Document {
      _type: "aksel_blogg";

      /**
       * Redaktører - `Array`
Legg til alle som har bidratt med denne siden!
       */
      contributors?: Array<Sanity.KeyedReference<editor>>;

      /**
       * Sidetittel - `String`
Bruk en kort og konsis tittel om mulig. Blir satt som `<H1 />` på toppen av siden i URL.
       */
      heading?: string;

      /**
       * url - `Slug`
       */
      slug?: {
        _type: "slug";
        current: string;
      };

      /**
       * Kort Intro/Oppsummering - `String`
Brukes i kort og innganger
       */
      oppsummering?: string;

      /**
       * Ingress - `String`
Side, innganger og seo description-tag
       */
      ingress?: string;

      /**
       * Innhold - `Array`
       */
      innhold?: Array<
        | Sanity.Keyed<generisk_seksjon_artikkel>
        | Sanity.Keyed<{
            _type: "riktekst_blokk";

            /**
             * Riktekst - `RegistryReference`
             */
            body?: riktekst;
          }>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
      >;

      /**
       * Under arbeid - `Boolean`
Hvis checked og publisert vil siden vises som under arbeid uten at lenker treffer 404
       */
      under_arbeid?: boolean;
    }

    /**
     * Aksel Tema
     */
    interface aksel_tema extends Sanity.Document {
      _type: "aksel_tema";

      /**
       * Navn - `String`
       */
      title?: string;

      /**
       * Kort Intro/Oppsummering - `String`
Brukes i kort og innganger
       */
      oppsummering?: string;

      /**
       * Beskrivelse - `RegistryReference`
       */
      beskrivelse?: riktekst;

      /**
       * Bruk seksjonsinndeling - `Boolean`
Vil ikke vise artikler som ikke er lagt til i seksjoner hvis valgt!
       */
      bruk_seksjoner?: boolean;

      /**
       * Seksjonering - `Array`
Del inn artiklene i flere seksjoner (vises ikke i preview før publisering desverre)
       */
      seksjoner?: Array<
        Sanity.Keyed<{
          _type: "seksjon";

          /**
           * Tittel - `String`
           */
          title?: string;

          /**
           * Beskrivelse - `RegistryReference`
           */
          beskrivelse?: riktekst;

          /**
           * Sider - `Array`
           */
          sider?: Array<Sanity.KeyedReference<aksel_artikkel>>;
        }>
      >;
    }

    /**
     * Aksel Prinsipp
     */
    interface aksel_prinsipp extends Sanity.Document {
      _type: "aksel_prinsipp";

      /**
       * Redaktører - `Array`
Legg til alle som har bidratt med denne siden!
       */
      contributors?: Array<Sanity.KeyedReference<editor>>;

      /**
       * Sidetittel - `String`
Bruk en kort og konsis tittel om mulig. Blir satt som `<H1 />` på toppen av siden i URL.
       */
      heading?: string;

      /**
       * url - `Slug`
       */
      slug?: {
        _type: "slug";
        current: string;
      };

      /**
       * Prinsipp - `Object`
Velg prinsippet siden omhandler
       */
      prinsipp?: {
        /**
         * Velg prinsipp - `String`
         */
        prinsippvalg?: "brukeropplevelse";

        /**
         * Er denne siden hovedsiden til Prinsippet? - `Boolean`
         */
        hovedside?: boolean;
      };

      /**
       * Kort Intro/Oppsummering - `String`
Brukes i kort og innganger
       */
      oppsummering?: string;

      /**
       * Ingress - `String`
Side, innganger og seo description-tag
       */
      ingress?: string;

      /**
       * Innhold - `Array`
       */
      innhold?: Array<
        | Sanity.Keyed<generisk_seksjon_artikkel>
        | Sanity.Keyed<{
            _type: "riktekst_blokk";

            /**
             * Riktekst - `RegistryReference`
             */
            body?: riktekst;
          }>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
      >;

      /**
       * Under arbeid - `Boolean`
Hvis checked og publisert vil siden vises som under arbeid uten at lenker treffer 404
       */
      under_arbeid?: boolean;
    }

    type generisk_seksjon = {
      _type: "generisk_seksjon";

      /**
       * Tittel (h2) - `String`
       */
      title?: string;

      /**
       * Innhold - `Array`
       */
      brikker?: Array<
        | Sanity.Keyed<{
            _type: "riktekst_blokk";

            /**
             * Riktekst - `RegistryReference`
             */
            body?: riktekst;
          }>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
        | Sanity.Keyed<do_dont_v2>
        | Sanity.Keyed<bilde>
        | Sanity.Keyed<video>
        | Sanity.Keyed<alert_v2>
        | Sanity.Keyed<kode>
        | Sanity.KeyedReference<ds_code_example>
        | Sanity.Keyed<tabell>
        | Sanity.Keyed<accordion_v2>
        | Sanity.Keyed<tokens>
        | Sanity.Keyed<spesial_seksjon>
      >;
    };

    type generisk_seksjon_artikkel = {
      _type: "generisk_seksjon_artikkel";

      /**
       * Tittel (h2) - `String`
       */
      title?: string;

      /**
       * Innhold - `Array`
       */
      brikker?: Array<
        | Sanity.Keyed<{
            _type: "riktekst_blokk";

            /**
             * Riktekst - `RegistryReference`
             */
            body?: riktekst;
          }>
        | Sanity.Keyed<tips>
        | Sanity.Keyed<relatert_innhold>
        | Sanity.Keyed<do_dont_v2>
        | Sanity.Keyed<bilde>
        | Sanity.Keyed<video>
        | Sanity.Keyed<alert_v2>
        | Sanity.Keyed<kode>
        | Sanity.Keyed<tabell>
        | Sanity.Keyed<accordion_v2>
        | Sanity.Keyed<tokens>
      >;
    };

    type riktekst = Array<Sanity.Keyed<Sanity.Block>>;

    type do_dont_v2 = {
      _type: "do_dont_v2";

      /**
       * Tittel (h3) - `String`
       */
      title?: string;

      /**
       * Forklaring (optional) - `RegistryReference`
       */
      forklaring?: riktekst;

      /**
       * Do / donts - `Array`
       */
      blokker?: Array<Sanity.Keyed<do_dont_block>>;
    };

    type bilde = {
      _type: "bilde";
      asset: Sanity.Asset;
      crop?: Sanity.ImageCrop;
      hotspot?: Sanity.ImageHotspot;

      /**
       * Alt-tekst - `String`
Beskriv bildet for skjermlesere
       */
      alt?: string;

      /**
       * Hide Floating - `Boolean`
       */
      hide_floating?: boolean;

      /**
       * Bilde med flytende tekst rundt - `Boolean`
Dette feltet fungerer ikke lengre, bruk et vanlig bilde uten flytende tekst
       */
      floating?: boolean;

      /**
       * Bilde-tekst (optional) - `String`
Dette vil stå under bildet
       */
      caption?: string;

      /**
       * Plassering av bilde - `String`
       */
      floating_align?: "venstre" | "hoyre";

      /**
       * Flytende tekst - `RegistryReference`
       */
      floating_text?: riktekst;

      /**
       * Bildet tar bare ~halve bredden - `Boolean`
       */
      small?: boolean;
    };

    type riktekst_enkel = Array<Sanity.Keyed<Sanity.Block>>;

    type riktekst_bilde = Array<
      Sanity.Keyed<Sanity.Block> | Sanity.Keyed<bilde>
    >;

    type riktekst_bilde_enkel = Array<
      Sanity.Keyed<Sanity.Block> | Sanity.Keyed<bilde>
    >;

    type alert_v2 = {
      _type: "alert_v2";

      /**
       * Variant - `String`
       */
      variant?: "success" | "info" | "warning" | "error";

      /**
       * Heading (optional) - `String`
       */
      heading?: string;

      /**
       * Heading nivå - `String`
       */
      heading_level?: "h3" | "h4";

      /**
       * Innhold - `RegistryReference`
       */
      body?: riktekst_enkel;
    };

    type kode = {
      _type: "kode";

      /**
       * Bruk predefinert kodesnutt? - `Boolean`
       */
      variant?: boolean;

      /**
       * Predefinert kodesnutt - `Reference`
       */
      ref?: Sanity.Reference<ds_code_example>;

      /**
       * Kode - `RegistryReference`
       */
      code?: any;
    };

    type relatert_innhold = {
      _type: "relatert_innhold";

      /**
       * Lenker til innhold - `Array`
       */
      lenker?: Array<
        Sanity.Keyed<{
          _type: "lenke";

          /**
           * Tittel - `String`
           */
          title?: string;

          /**
           * Beskrivelse - `String`
           */
          description?: string;

          /**
           * Intern side i Sanity - `Boolean`
           */
          intern?: boolean;

          /**
           * Lenke til Intern sanity-side - `Reference`
           */
          intern_lenke?: Sanity.Reference<
            | ds_component_page
            | komponent_artikkel
            | ds_artikkel
            | aksel_artikkel
            | aksel_blogg
            | aksel_prinsipp
          >;

          /**
           * Lenke til ekstern side - `Url`
           */
          ekstern_link?: string;

          /**
           * Linker til et eksternt domene - `Boolean`
           */
          ekstern_domene?: boolean;

          /**
           * Tagging - `String`
           */
          tags?: "none" | "custom";

          /**
           * Tag - `String`
           */
          tag?: string;
        }>
      >;
    };

    type intro_komponent_seksjon = {
      _type: "intro_komponent_seksjon";

      /**
       * Intro/Ingress - `RegistryReference`
       */
      body?: riktekst_enkel;

      /**
       * Egnet til - `Array`
       */
      brukes_til?: Array<Sanity.Keyed<string>>;

      /**
       * Når bør man vurdere noe annet (optional) - `Array`
       */
      brukes_ikke_til?: Array<Sanity.Keyed<string>>;
    };

    type live_demo_seksjon = {
      _type: "live_demo_seksjon";

      /**
       * Avsnitt (optional) - `RegistryReference`
       */
      body?: riktekst_enkel;

      /**
       * Erstatt Sandbox med vanlig kode-eksempel - `Boolean`
       */
      erstatt?: boolean;

      /**
       * Demo/Sandobox - `Reference`
       */
      sandbox_ref?: Sanity.Reference<ds_code_sandbox>;

      /**
       * Kode-eksempel - `Reference`
       */
      code_ref?: Sanity.Reference<ds_code_example>;
    };

    type tabell = {
      _type: "tabell";

      /**
       * Tittel (optional) - `String`
Gi tabellen et navn for å lettere finne den
       */
      title?: string;

      /**
       * Tabell - `RegistryReference`
       */
      powerTable?: any;
    };

    type uu_seksjon = {
      _type: "uu_seksjon";

      /**
       * Tittel (h2) - `String`
       */
      title?: string;

      /**
       * Generisk innhold - `RegistryReference`
       */
      innhold?: riktekst_bilde;

      /**
       * Interaksjon med mus (optional) - `RegistryReference`
       */
      interaksjon_mus?: riktekst_bilde_enkel;

      /**
       * Interaksjon med touch (optional) - `RegistryReference`
       */
      interaksjon_touch?: riktekst_bilde_enkel;

      /**
       * Interaksjon med tastatur (optional) - `RegistryReference`
Ekstra info som ikke kan forklares med key + action under
       */
      interaksjon_tastatur?: riktekst_bilde_enkel;

      /**
       * Tastatur key + action - `Array`
       */
      tastatur?: Array<
        Sanity.Keyed<{
          _type: "keys";

          /**
           * Key - `String`
           */
          key?: string;

          /**
           * Action - `String`
           */
          action?: string;
        }>
      >;

      /**
       * Interaksjon med skjermleser (optional) - `RegistryReference`
       */
      interaksjon_skjermleser?: riktekst_bilde_enkel;
    };

    type anatomi_seksjon = {
      _type: "anatomi_seksjon";

      /**
       * Nested - `Boolean`
       */
      nested?: boolean;

      /**
       * Tittel (h2) - `String`
       */
      title?: string;

      /**
       * Intro (optional) - `RegistryReference`
       */
      intro?: riktekst;

      /**
       * Anatomi-bilde - `RegistryReference`
       */
      bilde?: bilde;

      /**
       * Forklaring - `Array`
Forklar annoteringen av anatomi-bildet
       */
      forklaring?: Array<
        Sanity.Keyed<{
          _type: "liste_element";

          /**
           * Element - `String`
           */
          element?: string;

          /**
           * Beskrivelse (optional) - `RegistryReference`
           */
          beskrivelse?: riktekst_enkel;
        }>
      >;

      /**
       * Ekstra anatomi-paneler (optional) - `Array`
Kan legge til flere anatomi-paneler under samme Anatomi-heading
       */
      extra?: Array<
        Sanity.Keyed<{
          _type: "anatomi_seksjon";

          /**
           * Nested - `Boolean`
           */
          nested?: boolean;

          /**
           * Tittel (h2) - `String`
           */
          title?: string;

          /**
           * Intro (optional) - `RegistryReference`
           */
          intro?: riktekst;

          /**
           * Anatomi-bilde - `RegistryReference`
           */
          bilde?: bilde;

          /**
       * Forklaring - `Array`
Forklar annoteringen av anatomi-bildet
       */
          forklaring?: Array<
            Sanity.Keyed<{
              _type: "liste_element";

              /**
               * Element - `String`
               */
              element?: string;

              /**
               * Beskrivelse (optional) - `RegistryReference`
               */
              beskrivelse?: riktekst_enkel;
            }>
          >;
        }>
      >;
    };

    type installasjon_seksjon = {
      _type: "installasjon_seksjon";

      /**
       * Tittel (h2) - `String`
       */
      title?: string;

      /**
       * Installasjon-snippet - `Reference`
       */
      code_ref?: Sanity.Reference<ds_code_example>;
    };

    type props_seksjon = {
      _type: "props_seksjon";

      /**
       * Tittel (h2) - `String`
       */
      title?: string;

      /**
       * Props - `Array`
       */
      komponenter?: Array<
        Sanity.Keyed<{
          _type: "komponent";

          /**
       * Komponent navn - `String`
Slik man ville brukt den, eks Accordion.Item
       */
          title?: string;

          /**
           * Bruker komponenten OverridableComponent API-et - `Boolean`
           */
          overridable?: boolean;

          /**
           * Komponent referanse - `Reference`
           */
          propref?: Sanity.Reference<ds_props>;
        }>
      >;
    };

    type accordion_v2 = {
      _type: "accordion_v2";

      /**
       * Tittel (optional) - `String`
       */
      title?: string;

      /**
       * Accordions - `Array`
       */
      list?: Array<
        Sanity.Keyed<{
          _type: "element";

          /**
           * Tittel  - `String`
           */
          title?: string;

          /**
           * Innhold - `Array`
           */
          innhold?: Array<
            | Sanity.Keyed<{
                _type: "riktekst_blokk";

                /**
                 * Riktekst - `RegistryReference`
                 */
                body?: riktekst;
              }>
            | Sanity.Keyed<tips>
            | Sanity.Keyed<relatert_innhold>
            | Sanity.Keyed<do_dont_v2>
            | Sanity.Keyed<bilde>
            | Sanity.Keyed<video>
            | Sanity.Keyed<alert_v2>
            | Sanity.Keyed<kode>
            | Sanity.Keyed<tabell>
            | Sanity.Keyed<tokens>
          >;
        }>
      >;
    };

    type riktekst_tabell = Array<Sanity.Keyed<Sanity.Block>>;

    type spesial_seksjon = {
      _type: "spesial_seksjon";

      /**
       * Modul - `String`
       */
      modul?:
        | "farge_kategori"
        | "ikonsok"
        | "endringslogg"
        | "komponentoversikt";

      /**
       * Farge kategori - `Reference`
       */
      farge_ref?: Sanity.Reference<ds_color_categories>;
    };

    type video = {
      _type: "video";

      /**
       * Video i WebM format - `File`
Vi anbefaler å bruke Webm formatet om mulig!
       */
      webm?: {
        asset: Sanity.Asset;
      };

      /**
       * Video i Mp4 format (fallback) - `File`
       */
      fallback?: {
        asset: Sanity.Asset;
      };

      /**
       * Alt tekst for skjermlesere - `String`
       */
      alt?: string;

      /**
       * Videotekst - `String`
Kort beskrivelse som vises rett under videon
       */
      caption?: string;

      /**
       * Transkripsjon - `Text`
Hvis videoen inneholder lyd, anbelfaler vi å skrive en transkripsjon som kan leses under videoen.
       */
      transkripsjon?: string;
    };

    type tokens = {
      _type: "tokens";

      /**
       * Tittel/beskrivelse - `String`
       */
      title?: string;

      /**
       * Tokens - `Array`
       */
      tokenlist?: Array<Sanity.KeyedReference<ds_tokens>>;
    };

    type tips = {
      _type: "tips";

      /**
       * Feedback - `Boolean`
Endrer modul-variant
       */
      eksperiment?: boolean;

      /**
       * Innhold - `RegistryReference`
       */
      body?: riktekst_enkel;
    };

    type navigation_link = {
      _type: "navigation_link";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Link - `Reference`
       */
      link_ref?: Sanity.Reference<
        ds_component_page | komponent_artikkel | ds_artikkel
      >;
    };

    type navigation_dropdown = {
      _type: "navigation_dropdown";

      /**
       * Tittel - `String`
       */
      title?: string;

      /**
       * Meny - `Array`
       */
      dropdown?: Array<
        Sanity.Keyed<navigation_link> | Sanity.Keyed<navigation_dropdown>
      >;
    };

    type alert = {
      _type: "alert";

      /**
       * Variant - `String`
       */
      variant?: "success" | "info" | "warning" | "error";

      /**
       * Størrelse - `String`
       */
      size?: "medium" | "small";

      /**
       * Heading (optional) - `String`
       */
      heading?: string;

      /**
       * Heading nivå - `String`
       */
      heading_level?: "h2" | "h3" | "h4";

      /**
       * Innhold - `RegistryReference`
       */
      body?: riktekst_enkel;
    };

    type code_example_ref = {
      _type: "code_example_ref";

      /**
       * Kode eksempel - `Reference`
       */
      ref?: Sanity.Reference<ds_code_example>;
    };

    type code_sandbox_ref = {
      _type: "code_sandbox_ref";

      /**
       * Sandbox - `Reference`
       */
      ref?: Sanity.Reference<ds_code_sandbox>;
    };

    type code_snippet = {
      _type: "code_snippet";

      /**
       * Tittel (for preview internt i sanity) - `String`
       */
      title?: string;

      /**
       * Kode - `RegistryReference`
       */
      code?: any;
    };

    type do_dont = {
      _type: "do_dont";

      /**
       * Tittel (vises bare internt i sanity) - `String`
       */
      title?: string;

      /**
       * Do / donts - `Array`
Liste med do/donts
       */
      blocks?: Array<Sanity.Keyed<do_dont_block>>;
    };

    type do_dont_block = {
      _type: "do_dont_block";

      /**
       * Fullwidth - `Boolean`
Tar opp ~ 40% eller 100% av tilgjengelig bredde
       */
      fullwidth?: boolean;

      /**
       * Bilde - `Image`
       */
      picture?: {
        asset: Sanity.Asset;
        crop?: Sanity.ImageCrop;
        hotspot?: Sanity.ImageHotspot;
      };

      /**
       * alt tekst for bilde - `String`
       */
      alt?: string;

      /**
       * Fritekst - `Text`
Korte konsise beskrivelser. Bruk fullbredde bilde i dodont med egen tekst for lengre forklaringer
       */
      description?: string;

      /**
       * Variant - `String`
       */
      variant?: "do" | "dont" | "warning";
    };

    type picture = {
      _type: "picture";
      asset: Sanity.Asset;
      crop?: Sanity.ImageCrop;
      hotspot?: Sanity.ImageHotspot;

      /**
       * Alt-tekst - `String`
Beskriv bildet for skjermlesere
       */
      title?: string;

      /**
       * Bilde-tekst - `String`
Dette vil stå under bildet
       */
      caption?: string;
    };

    type prop_table = {
      _type: "prop_table";

      /**
       * Props - `Array`
       */
      komponenter?: Array<
        Sanity.Keyed<{
          _type: "komponent";

          /**
       * Komponent navn - `String`
Slik man ville brukt den, eks Accordion.Item
       */
          title?: string;

          /**
           * Bruker komponenten OverridableComponent API-et - `Boolean`
           */
          overridable?: boolean;

          /**
           * Komponent referanse - `Reference`
           */
          propref?: Sanity.Reference<ds_props>;
        }>
      >;
    };

    type blockContent = Array<
      | Sanity.Keyed<Sanity.Block>
      | Sanity.Keyed<picture>
      | Sanity.Keyed<tips>
      | Sanity.Keyed<alert_v2>
      | Sanity.Keyed<relatert_innhold>
      | Sanity.Keyed<code_snippet>
      | Sanity.Keyed<do_dont>
      | Sanity.Keyed<code_sandbox_ref>
      | Sanity.Keyed<code_example_ref>
      | Sanity.Keyed<prop_table>
    >;

    type ds_icon = {
      _type: "ds_icon";

      /**
       * Ikon - `String`
Bruk fargesøket på nettsiden for å finne riktig ikon
       */
      name?:
        | "Add"
        | "AddCircle"
        | "AddCircleFilled"
        | "AddFilled"
        | "AddPerson"
        | "AddPersonFilled"
        | "Applicant"
        | "Attachment"
        | "AttachmentFilled"
        | "AutomaticSystem"
        | "AutomaticSystemFilled"
        | "BabyChangingRoom"
        | "BabyChangingRoomFilled"
        | "Back"
        | "BackFilled"
        | "Bag"
        | "BagFilled"
        | "Baggage"
        | "BaggageFilled"
        | "Bandage"
        | "BandageFilled"
        | "Bed"
        | "BedFilled"
        | "Bell"
        | "BellFilled"
        | "Bike"
        | "BikeFilled"
        | "Bookmark"
        | "BookmarkFilled"
        | "Bowl"
        | "BowlFilled"
        | "Braille"
        | "BrailleFilled"
        | "Calculator"
        | "CalculatorFilled"
        | "Calender"
        | "CalenderFilled"
        | "Camera"
        | "CameraFilled"
        | "Cancel"
        | "CancelFilled"
        | "Candle"
        | "CandleFilled"
        | "Cantine1"
        | "Cantine1Filled"
        | "Cantine2"
        | "Cantine2Filled"
        | "Car"
        | "CarFilled"
        | "Caseworker"
        | "CaseworkerFilled"
        | "Child"
        | "ChildFilled"
        | "Clock"
        | "ClockFilled"
        | "Close"
        | "CloseFilled"
        | "CoApplicant"
        | "CoApplicantFilled"
        | "Cognition"
        | "CognitionFilled"
        | "Collapse"
        | "CollapseFilled"
        | "Combifridge1"
        | "Combifridge1Filled"
        | "Combifridge2"
        | "Combifridge2Filled"
        | "Copy"
        | "CopyFilled"
        | "Coronavirus"
        | "CoronavirusFilled"
        | "Cup"
        | "CupFilled"
        | "Data"
        | "DataFilled"
        | "Decision"
        | "DecisionCheck"
        | "DecisionCheckFilled"
        | "DecisionCross"
        | "DecisionFilled"
        | "Delete"
        | "DeleteFilled"
        | "Dialog"
        | "DialogDots"
        | "DialogDotsFilled"
        | "DialogFilled"
        | "DialogReport"
        | "DialogReportFilled"
        | "DialogSuccess"
        | "DialogSuccessFilled"
        | "DirectionSign"
        | "DirectionSignFilled"
        | "Disability"
        | "DisabilityFilled"
        | "Dish"
        | "DishFilled"
        | "Dishwasher"
        | "DishwasherFilled"
        | "Divide"
        | "DivideFilled"
        | "Down"
        | "DownFilled"
        | "Download"
        | "DownloadFilled"
        | "DrinkingWaterFilled"
        | "DrinkingWaterStroke"
        | "Edit"
        | "EditFilled"
        | "Elevator"
        | "ElevatorFilled"
        | "EllipsisCircleH"
        | "EllipsisCircleHFilled"
        | "EllipsisH"
        | "EllipsisHFilled"
        | "EllipsisV"
        | "EllipsisVFilled"
        | "Email"
        | "EmailFilled"
        | "EmailOpened"
        | "EmailOpenedFilled"
        | "Employer"
        | "EmployerFilled"
        | "Error"
        | "ErrorFilled"
        | "Eu"
        | "EuFilled"
        | "Expand"
        | "ExpandFilled"
        | "ExternalLink"
        | "ExternalLinkFilled"
        | "Eye"
        | "EyeFilled"
        | "EyeScreened"
        | "EyeScreenedFilled"
        | "Facilitet"
        | "FacilitetFilled"
        | "Family"
        | "FamilyFilled"
        | "FeedingBottle"
        | "FeedingBottleFilled"
        | "Female"
        | "FemaleFilled"
        | "File"
        | "FileContent"
        | "FileContentFilled"
        | "FileError"
        | "FileErrorFilled"
        | "FileFilled"
        | "FileFolder"
        | "FileFolderFilled"
        | "FileProgressFilled"
        | "FileSuccess"
        | "FileSuccessFilled"
        | "Files"
        | "FillForms"
        | "FillFormsFilled"
        | "Filter"
        | "Filter2"
        | "Filter2Filled"
        | "FilterFilled"
        | "Findout"
        | "FindoutFilled"
        | "FlowerBladeFall"
        | "FlowerBladeFallFilled"
        | "Folder"
        | "FolderFilled"
        | "ForkSpoonKnife"
        | "ForkSpoonKnifeFilled"
        | "Forward"
        | "ForwardFilled"
        | "Freezer"
        | "FreezerFilled"
        | "FullscreenEnter"
        | "FullscreenEnterFilled"
        | "FullscreenExit"
        | "FullscreenExitFilled"
        | "Glass"
        | "GlassFilled"
        | "Glasses"
        | "GlassesFilled"
        | "Globe"
        | "GlobeFilled"
        | "GuideDog"
        | "GuideDogFilled"
        | "Hamburger"
        | "HamburgerFilled"
        | "HandBandage"
        | "HandBandageFilled"
        | "HandsHeart"
        | "HandsHeartFilled"
        | "Hanger"
        | "HangerFilled"
        | "HealthCase"
        | "HealthCaseFilled"
        | "Hearing"
        | "HearingFilled"
        | "HearingImpaired"
        | "HearingImpairedFilled"
        | "HearingImpairedTeleslynge"
        | "HearingImpairedTeleslyngeFilled"
        | "HearingImpairedWireless"
        | "HearingImpairedWirelessFilled"
        | "Heart"
        | "HeartBroken"
        | "HeartBrokenFilled"
        | "HeartFilled"
        | "Helmet"
        | "HelmetFilled"
        | "Helptext"
        | "HelptextFilled"
        | "Historic"
        | "HistoricFilled"
        | "Home"
        | "HomeFilled"
        | "Horse"
        | "HorseFilled"
        | "Hospital"
        | "HospitalFilled"
        | "Infants"
        | "InfantsFilled"
        | "Information"
        | "InformationFilled"
        | "Laptop"
        | "LaptopFilled"
        | "Law"
        | "LawFilled"
        | "Left"
        | "LeftFilled"
        | "LightBulb"
        | "LightBulbFilled"
        | "Like"
        | "LikeFilled"
        | "Link"
        | "LinkFilled"
        | "List"
        | "ListFilled"
        | "Locked"
        | "LockedFilled"
        | "Login"
        | "LoginFilled"
        | "Logout"
        | "LogoutFilled"
        | "Male"
        | "MaleFilled"
        | "MeetingRoom"
        | "MeetingRoomFilled"
        | "Minus"
        | "MinusCircle"
        | "MinusCircleFilled"
        | "MinusFilled"
        | "Mobile"
        | "MobileFilled"
        | "Money"
        | "MoneyFilled"
        | "Monitor"
        | "MonitorFilled"
        | "Motorcycle"
        | "MotorcycleFilled"
        | "Mute"
        | "MuteFilled"
        | "Neutral"
        | "NeutralFilled"
        | "NewTab"
        | "NewTabFilled"
        | "Next"
        | "NextFilled"
        | "NoSmoking"
        | "NoSmokingFilled"
        | "NorwegianFlag"
        | "NorwegianFlagFilled"
        | "Notes"
        | "NotesFilled"
        | "Office1"
        | "Office1Filled"
        | "Office2"
        | "Office2Filled"
        | "Over18"
        | "Over18Filled"
        | "Parking"
        | "ParkingFilled"
        | "Passport"
        | "PassportFilled"
        | "PensionBag"
        | "PensionBagFilled"
        | "PensionFlower"
        | "PensionFlowerFilled"
        | "People"
        | "PeopleDialogFilled"
        | "PeopleDialogOutline"
        | "PeopleFilled"
        | "Picture"
        | "PictureFilled"
        | "Place"
        | "PlaceFilled"
        | "Plane"
        | "PlaneFilled"
        | "Plant"
        | "PlantFilled"
        | "Pregnant"
        | "PregnantFilled"
        | "Print"
        | "PrintFilled"
        | "PrinterRoom"
        | "PrinterRoomFilled"
        | "Profile"
        | "ProfileFilled"
        | "Quiet"
        | "QuietFilled"
        | "Receipt"
        | "ReceiptFilled"
        | "Reception"
        | "ReceptionFilled"
        | "Recycle"
        | "RecycleFilled"
        | "Refresh"
        | "RefreshFilled"
        | "Refrigerator"
        | "RefrigeratorFilled"
        | "Right"
        | "RightFilled"
        | "Ruler"
        | "RulerFilled"
        | "Sandglass"
        | "SandglassFilled"
        | "SaveFile"
        | "SaveFileFilled"
        | "Saving"
        | "SavingFilled"
        | "Scale"
        | "ScaleFilled"
        | "SchoolBag"
        | "SchoolBagFilled"
        | "Search"
        | "SearchFilled"
        | "Selection"
        | "SelectionFilled"
        | "SelfService"
        | "SelfServiceFilled"
        | "SelfServiceMobile"
        | "SelfServiceMobileFilled"
        | "Send"
        | "SendFilled"
        | "Service"
        | "ServiceFilled"
        | "Settings"
        | "SettingsFilled"
        | "ShakeHands"
        | "ShakeHandsFilled"
        | "Share"
        | "ShareFilled"
        | "Shower"
        | "ShowerFilled"
        | "Shredding"
        | "ShreddingFilled"
        | "Sight"
        | "SightFilled"
        | "Sightless"
        | "SightlessFilled"
        | "SignLanguage"
        | "SignLanguageFilled"
        | "SignLanguageTwoHands"
        | "SignLanguageTwoHandsFilled"
        | "SingleParent"
        | "SingleParentFilled"
        | "SocialAid"
        | "SocialAidFilled"
        | "SpeechBubble"
        | "SpeechBubbleFilled"
        | "Stairs"
        | "StairsFilled"
        | "Star"
        | "StarFilled"
        | "Stethoscope"
        | "StopWatch"
        | "StopWatchFilled"
        | "Stroller"
        | "StrollerFilled"
        | "Success"
        | "SuccessFilled"
        | "SuccessStroke"
        | "System"
        | "SystemError"
        | "SystemErrorFilled"
        | "SystemFilled"
        | "TalkingRoom"
        | "TalkingRoomFilled"
        | "Task"
        | "TaskFilled"
        | "Teddy"
        | "TeddyFilled"
        | "Telephone"
        | "TelephoneFilled"
        | "ThermometerFilled"
        | "ThermometerStroke"
        | "Tooth"
        | "ToothFilled"
        | "Traning"
        | "TraningFilled"
        | "Truck"
        | "TruckFilled"
        | "Umbrella"
        | "UmbrellaFilled"
        | "Unlocked"
        | "UnlockedFilled"
        | "Up"
        | "UpDown"
        | "UpDownFilled"
        | "UpFilled"
        | "Upload"
        | "UploadFilled"
        | "Vacation"
        | "VacationFilled"
        | "VideoRoom"
        | "VideoRoomFilled"
        | "VolumeDown"
        | "VolumeDownFilled"
        | "VolumeUp"
        | "VolumeUpFilled"
        | "WaitingRoom"
        | "WaitingRoomFilled"
        | "Wardrobe"
        | "WardrobeFilled"
        | "Warning"
        | "WarningFilled"
        | "Washing"
        | "WashingFilled"
        | "WateringCan"
        | "WateringCanFilled"
        | "Wireless"
        | "WirelessFilled"
        | "Wrench"
        | "WrenchFilled"
        | "ZoomIn"
        | "ZoomInFilled"
        | "ZoomOut"
        | "ZoomOutFilled";

      /**
       * Farge - `String`
Defaulter til tekstfarge
       */
      color?:
        | "NavdsSemanticColorFeedbackDangerIcon"
        | "NavdsSemanticColorFeedbackInfoIcon"
        | "NavdsSemanticColorFeedbackSuccessIcon"
        | "NavdsSemanticColorFeedbackWarningIcon";
    };

    type ds_color = {
      _type: "ds_color";

      /**
       * Navn - `String`
       */
      title?: string;

      /**
       * CSS variabelnavn - `String`
       */
      full_title?: string;

      /**
       * Fargetype/nivå - `String`
       */
      color_type?: "global" | "semantic";

      /**
       * Brukt fargenavn - `String`
       */
      color_name?: string;

      /**
       * Fargeroller - `Array`
       */
      color_roles?: Array<Sanity.Keyed<string>>;

      /**
       * Brukt farge - `String`
       */
      color_value?: string;

      /**
       * Fargeindeks - `Number`
Brukes for å endre rekkefølgen på listen. Farger med indeks 0 vil være først, større tall sorteres under der igjen
       */
      color_index?: number;
    };

    type ds_navigation_heading = {
      _type: "ds_navigation_heading";

      /**
       * Heading tittel - `String`
       */
      title?: string;

      /**
       * Hovedkategori - `Reference`
       */
      category_ref?: Sanity.Reference<main_categories>;

      /**
       * Side selve headingen linker til - `Reference`
Husk å legge denne til i menyen også, hvis ikke blir den bare tilgjengelig via headern
       */
      link_ref?: Sanity.Reference<
        ds_component_page | komponent_artikkel | ds_artikkel
      >;

      /**
       * Meny for denne headingen - `Array`
       */
      menu?: Array<
        | Sanity.Keyed<{
            _type: "item";

            /**
             * Menypunkt tittel - `String`
             */
            title?: string;

            /**
             * Link til side - `Reference`
             */
            link?: Sanity.Reference<
              ds_component_page | komponent_artikkel | ds_artikkel
            >;
          }>
        | Sanity.Keyed<{
            _type: "subheading";

            /**
             * Subheading - `String`
             */
            title?: string;
          }>
      >;
    };

    type code_example_example = {
      _type: "code_example_example";

      /**
       * Tab tittel - `String`
       */
      title?: string;

      /**
       * Kode eksempel - `RegistryReference`
       */
      example?: any;
    };

    type Document =
      | vk_frontpage
      | team
      | editor
      | navigation
      | introduction
      | ds_changelog
      | ds_code_example
      | ds_code_sandbox
      | ds_color_categories
      | ds_tokens
      | ds_props
      | ds_component_page
      | ds_component_template
      | ds_frontpage
      | main_categories
      | ds_navigation
      | ds_component_overview
      | ds_package
      | komponent_artikkel
      | ds_artikkel
      | aksel_artikkel
      | aksel_blogg
      | aksel_tema
      | aksel_prinsipp;
  }
}

export default SanityT;
