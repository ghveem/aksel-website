[
  {
    "filePath": "src/accordion/Accordion.tsx",
    "displayName": "Accordion",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content inside accordion",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/accordion/AccordionContent.tsx",
    "displayName": "AccordionContent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Accordion panel content",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/AccordionContent.tsx",
          "name": "AccordionContentProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionContent.tsx",
            "name": "AccordionContentProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/accordion/AccordionHeader.tsx",
    "displayName": "AccordionHeader",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Accordion button content",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/AccordionHeader.tsx",
          "name": "AccordionHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionHeader.tsx",
            "name": "AccordionHeaderProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/accordion/AccordionItem.tsx",
    "displayName": "AccordionItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content inside Accordion.Item",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Opens component if 'true', closes if 'false'\nUsing this props removes automatic control of open-state",
        "name": "open",
        "parent": {
          "fileName": "src/accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Defaults the accordion to opened state if not controlled",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "renderContentWhenClosed": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Removes content-element from dom when closed",
        "name": "renderContentWhenClosed",
        "parent": {
          "fileName": "src/accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/alert/Alert.tsx",
    "displayName": "Alert",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Alert content",
        "name": "children",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Decides what design the alert will have",
        "name": "variant",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"error\" | \"warning\" | \"info\" | \"success\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding and font-sizes",
        "name": "size",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "fullWidth": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Toggles full-width Alert (removes border-radius)",
        "name": "fullWidth",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Removes background from Alert",
        "name": "inline",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/button/Button.tsx",
    "displayName": "Button",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Button content",
        "name": "children",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "primary"
        },
        "description": "Changes design and interaction-visuals",
        "name": "variant",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"tertiary\" | \"danger\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding, height and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\" | \"xsmall\""
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Prevent the user from interacting with the button: it cannot be pressed or focused.\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Replaces button content with a Loader component, keeps width",
        "name": "loading",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/card/MicroCard.tsx",
    "displayName": "MicroCard",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Link text",
        "name": "children",
        "parent": {
          "fileName": "src/card/MicroCard.tsx",
          "name": "MicroCardProps"
        },
        "declarations": [
          {
            "fileName": "src/card/MicroCard.tsx",
            "name": "MicroCardProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/ConfirmationPanel.tsx",
    "displayName": "ConfirmationPanel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Additional information on panel",
        "name": "children",
        "parent": {
          "fileName": "src/form/ConfirmationPanel.tsx",
          "name": "ConfirmationPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/ConfirmationPanel.tsx",
            "name": "ConfirmationPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Checkbox label",
        "name": "label",
        "parent": {
          "fileName": "src/form/ConfirmationPanel.tsx",
          "name": "ConfirmationPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/ConfirmationPanel.tsx",
            "name": "ConfirmationPanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "error": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Checkbox has error",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the HTML element.",
        "name": "value",
        "parent": {
          "fileName": "react/src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "Hides label and makes it viewable for screen-readers only.",
        "name": "hideLabel",
        "parent": {
          "fileName": "react/src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "indeterminate": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Specify whether the Checkbox is in an indeterminate state",
        "name": "indeterminate",
        "parent": {
          "fileName": "react/src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/ErrorMessage.tsx",
    "displayName": "ErrorMessage",
    "props": {}
  },
  {
    "filePath": "src/form/Select.tsx",
    "displayName": "Select",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collection of <option>-elements",
        "name": "children",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "htmlSize": {
        "defaultValue": null,
        "description": "Expose the HTML size attribute",
        "name": "htmlSize",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for select",
        "name": "label",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLSelectElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Switch.tsx",
    "displayName": "Switch",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Switch-label",
        "name": "children",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Toggles loading state with loader-component on switch",
        "name": "loading",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Positions switch on left/right side of label",
        "name": "position",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/TextField.tsx",
    "displayName": "TextField",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The current value (controlled).",
        "name": "value",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "The default value (uncontrolled).",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "htmlSize": {
        "defaultValue": null,
        "description": "Expose the HTML size attribute",
        "name": "htmlSize",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "TextField label",
        "name": "label",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "type": {
        "defaultValue": {
          "value": "\"text\""
        },
        "description": "Type of form control",
        "name": "type",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"number\" | \"email\" | \"password\" | \"tel\" | \"text\" | \"url\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Textarea.tsx",
    "displayName": "Textarea",
    "props": {
      "maxLength": {
        "defaultValue": null,
        "description": "Visually allowed length of content",
        "name": "maxLength",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxRows": {
        "defaultValue": null,
        "description": "Maximum number of rows to display.\n@bug Internal scrolling with `maxLength` scrolls over maxLength-text",
        "name": "maxRows",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minRows": {
        "defaultValue": null,
        "description": "Minimum number of rows to display.",
        "name": "minRows",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Textarea label",
        "name": "label",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTextAreaElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Textarea.tsx",
    "displayName": "Counter",
    "props": {
      "maxLength": {
        "defaultValue": null,
        "description": "",
        "name": "maxLength",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "currentLength": {
        "defaultValue": null,
        "description": "",
        "name": "currentLength",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "filePath": "src/grid/Cell.tsx",
    "displayName": "Cell",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Cell content",
        "name": "children",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "xs": {
        "defaultValue": null,
        "description": "Cell columns on width < 448px",
        "name": "xs",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Column"
        }
      },
      "sm": {
        "defaultValue": null,
        "description": "Cell columns on min-width: 448",
        "name": "sm",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Column"
        }
      },
      "md": {
        "defaultValue": null,
        "description": "Cell columns on min-width: 648",
        "name": "md",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Column"
        }
      },
      "lg": {
        "defaultValue": null,
        "description": "Cell columns on min-width: 960px",
        "name": "lg",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Column"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/grid/ContentContainer.tsx",
    "displayName": "ContentContainer",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "ContentContainer content",
        "name": "children",
        "parent": {
          "fileName": "src/grid/ContentContainer.tsx",
          "name": "ContentContainerProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/ContentContainer.tsx",
            "name": "ContentContainerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/grid/Grid.tsx",
    "displayName": "Grid",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collection of <Cell>-elements",
        "name": "children",
        "parent": {
          "fileName": "src/grid/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/guide-panel/Guide.tsx",
    "displayName": "Guide",
    "props": {
      "illustration": {
        "defaultValue": null,
        "description": "Custom svg/img element",
        "name": "illustration",
        "parent": {
          "fileName": "src/guide-panel/Guide.tsx",
          "name": "GuideProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/Guide.tsx",
            "name": "GuideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Predefined size properties for illustration",
        "name": "size",
        "parent": {
          "fileName": "src/guide-panel/Guide.tsx",
          "name": "GuideProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/Guide.tsx",
            "name": "GuideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"medium\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/guide-panel/GuidePanel.tsx",
    "displayName": "GuidePanel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "GuidePanel content",
        "name": "children",
        "parent": {
          "fileName": "src/guide-panel/GuidePanel.tsx",
          "name": "GuidePanelProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/GuidePanel.tsx",
            "name": "GuidePanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "illustration": {
        "defaultValue": null,
        "description": "Custom svg/img element",
        "name": "illustration",
        "parent": {
          "fileName": "src/guide-panel/GuidePanel.tsx",
          "name": "GuidePanelProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/GuidePanel.tsx",
            "name": "GuidePanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "poster": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Poster positions guide-illustation above content",
        "name": "poster",
        "parent": {
          "fileName": "src/guide-panel/GuidePanel.tsx",
          "name": "GuidePanelProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/GuidePanel.tsx",
            "name": "GuidePanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/help-text/HelpText.tsx",
    "displayName": "HelpText",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Component content",
        "name": "children",
        "parent": {
          "fileName": "src/help-text/HelpText.tsx",
          "name": "HelpTextProps"
        },
        "declarations": [
          {
            "fileName": "src/help-text/HelpText.tsx",
            "name": "HelpTextProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strategy": {
        "defaultValue": {
          "value": "absolute"
        },
        "description": "Changes what CSS position property to use\nYou want to use \"fixed\" if reference element is inside a fixed container, but popover is not",
        "name": "strategy",
        "parent": {
          "fileName": "react/src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "react/src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"absolute\" | \"fixed\""
        }
      },
      "placement": {
        "defaultValue": {
          "value": "top"
        },
        "description": "Orientation for popover",
        "name": "placement",
        "parent": {
          "fileName": "react/src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "react/src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link/Link.tsx",
    "displayName": "Link",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Link text",
        "name": "children",
        "parent": {
          "fileName": "src/link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "src/link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link-panel/LinkPanel.tsx",
    "displayName": "LinkPanelComponent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Panel content",
        "name": "children",
        "parent": {
          "fileName": "src/link-panel/LinkPanel.tsx",
          "name": "LinkPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/link-panel/LinkPanel.tsx",
            "name": "LinkPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "border": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles border on panel",
        "name": "border",
        "parent": {
          "fileName": "src/link-panel/LinkPanel.tsx",
          "name": "LinkPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/link-panel/LinkPanel.tsx",
            "name": "LinkPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link-panel/LinkPanelDescription.tsx",
    "displayName": "LinkPanelDescription",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link-panel/LinkPanelTitle.tsx",
    "displayName": "LinkPanelTitle",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/loader/Loader.tsx",
    "displayName": "Loader",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes sizing\n64px | 40px | 32px | 24px | 20px | 16px",
        "name": "size",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"2xlarge\" | \"xlarge\" | \"large\" | \"medium\" | \"small\" | \"xsmall\""
        }
      },
      "title": {
        "defaultValue": {
          "value": "venter..."
        },
        "description": "Title prop on svg",
        "name": "title",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "transparent": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "transparent",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "neutral"
        },
        "description": "Colored variants for loader",
        "name": "variant",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"neutral\" | \"interaction\" | \"inverted\""
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<SVGSVGElement>"
        }
      }
    }
  },
  {
    "filePath": "src/menu/Menu.tsx",
    "displayName": "Menu",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLElement>"
        }
      }
    }
  },
  {
    "filePath": "src/menu/MenuCollapse.tsx",
    "displayName": "Collapse",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "src/menu/MenuCollapse.tsx",
          "name": "MenuCollapseProps"
        },
        "declarations": [
          {
            "fileName": "src/menu/MenuCollapse.tsx",
            "name": "MenuCollapseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/menu/MenuCollapse.tsx",
          "name": "MenuCollapseProps"
        },
        "declarations": [
          {
            "fileName": "src/menu/MenuCollapse.tsx",
            "name": "MenuCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/menu/MenuCollapse.tsx",
    "displayName": "MenuCollapse",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "src/menu/MenuCollapse.tsx",
          "name": "MenuCollapseProps"
        },
        "declarations": [
          {
            "fileName": "src/menu/MenuCollapse.tsx",
            "name": "MenuCollapseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/menu/MenuCollapse.tsx",
          "name": "MenuCollapseProps"
        },
        "declarations": [
          {
            "fileName": "src/menu/MenuCollapse.tsx",
            "name": "MenuCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/menu/MenuItem.tsx",
    "displayName": "Item",
    "props": {
      "active": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Sets active styling if true",
        "name": "active",
        "parent": {
          "fileName": "src/menu/MenuItem.tsx",
          "name": "MenuItemProps"
        },
        "declarations": [
          {
            "fileName": "src/menu/MenuItem.tsx",
            "name": "MenuItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/menu/MenuItems.tsx",
    "displayName": "MenuItems",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "src/menu/MenuItems.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "filePath": "src/modal/Modal.tsx",
    "displayName": "Modal",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Modal content",
        "name": "children",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Open state for modal",
        "name": "open",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when modal wants to close",
        "name": "onClose",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "shouldCloseOnOverlayClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If modal should close on overlay click",
        "name": "shouldCloseOnOverlayClick",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "User defined classname for modal",
        "name": "className",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles addition of a X-button on modal",
        "name": "closeButton",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "parentSelector": {
        "defaultValue": null,
        "description": "Callback for getting parent element modal will attach to",
        "name": "parentSelector",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => HTMLElement)"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-describedby",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-modal": {
        "defaultValue": null,
        "description": "",
        "name": "aria-modal",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Sets aria-label on modal\n@warning This should be set if not using 'aria-labelledby' or 'aria-describedby'",
        "name": "aria-label",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<ReactModal>"
        }
      }
    }
  },
  {
    "filePath": "src/modal/ModalContent.tsx",
    "displayName": "ModalContent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Modal.Content content",
        "name": "children",
        "parent": {
          "fileName": "src/modal/ModalContent.tsx",
          "name": "ModalContentProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/ModalContent.tsx",
            "name": "ModalContentProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/page-header/PageHeader.tsx",
    "displayName": "PageHeader",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "PageHeader title",
        "name": "children",
        "parent": {
          "fileName": "src/page-header/PageHeader.tsx",
          "name": "PageHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/page-header/PageHeader.tsx",
            "name": "PageHeaderProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "illustration": {
        "defaultValue": null,
        "description": "Pictogram placed in PageHeader",
        "name": "illustration",
        "parent": {
          "fileName": "src/page-header/PageHeader.tsx",
          "name": "PageHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/page-header/PageHeader.tsx",
            "name": "PageHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Short text placed under title",
        "name": "description",
        "parent": {
          "fileName": "src/page-header/PageHeader.tsx",
          "name": "PageHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/page-header/PageHeader.tsx",
            "name": "PageHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "guide"
        },
        "description": "Predefined variants for PageHeader",
        "name": "variant",
        "parent": {
          "fileName": "src/page-header/PageHeader.tsx",
          "name": "PageHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/page-header/PageHeader.tsx",
            "name": "PageHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"situation\" | \"product\" | \"guide\""
        }
      },
      "align": {
        "defaultValue": {
          "value": "left"
        },
        "description": "Decides how to align content",
        "name": "align",
        "parent": {
          "fileName": "src/page-header/PageHeader.tsx",
          "name": "PageHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/page-header/PageHeader.tsx",
            "name": "PageHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"center\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/pagination/Pagination.tsx",
    "displayName": "getSteps",
    "props": {
      "page": {
        "defaultValue": null,
        "description": "",
        "name": "page",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "boundaryCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "boundaryCount",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "siblingCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "siblingCount",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "filePath": "src/pagination/Pagination.tsx",
    "displayName": "Pagination",
    "props": {
      "page": {
        "defaultValue": null,
        "description": "Current page",
        "name": "page",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "siblingCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number of always visible pages before and after the current page.",
        "name": "siblingCount",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "boundaryCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number of always visible pages at the beginning and end.",
        "name": "boundaryCount",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onPageChange": {
        "defaultValue": null,
        "description": "Callback when current page changes",
        "name": "onPageChange",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(page: number) => void"
        }
      },
      "count": {
        "defaultValue": null,
        "description": "Total number of pages",
        "name": "count",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding, height and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "prevNextTexts": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Display text alongside \"previous\" and \"next\" icons",
        "name": "prevNextTexts",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLElement>"
        }
      }
    }
  },
  {
    "filePath": "src/panel/Panel.tsx",
    "displayName": "Panel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Panel content",
        "name": "children",
        "parent": {
          "fileName": "src/panel/Panel.tsx",
          "name": "PanelProps"
        },
        "declarations": [
          {
            "fileName": "src/panel/Panel.tsx",
            "name": "PanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "border": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Toggles border on panel",
        "name": "border",
        "parent": {
          "fileName": "src/panel/Panel.tsx",
          "name": "PanelProps"
        },
        "declarations": [
          {
            "fileName": "src/panel/Panel.tsx",
            "name": "PanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLElement>"
        }
      }
    }
  },
  {
    "filePath": "src/popover/Popover.tsx",
    "displayName": "Popover",
    "props": {
      "anchorEl": {
        "defaultValue": null,
        "description": "Element popover anchors to",
        "name": "anchorEl",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Element | null"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Open state",
        "name": "open",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "onClose callback",
        "name": "onClose",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Popover content",
        "name": "children",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "\"right\""
        },
        "description": "Orientation for popover",
        "name": "placement",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "arrow": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles rendering of arrow",
        "name": "arrow",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "offset": {
        "defaultValue": {
          "value": "16 w/arrow, 4 w/no-arrow"
        },
        "description": "Distance from anchor to popover",
        "name": "offset",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strategy": {
        "defaultValue": {
          "value": "\"absolute\""
        },
        "description": "Changes what CSS position property to use\nYou want to use \"fixed\" if reference element is inside a fixed container, but popover is not",
        "name": "strategy",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"absolute\" | \"fixed\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/popover/PopoverContent.tsx",
    "displayName": "PopoverContent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Modal.Content content",
        "name": "children",
        "parent": {
          "fileName": "src/popover/PopoverContent.tsx",
          "name": "PopoverContentProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/PopoverContent.tsx",
            "name": "PopoverContentProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/read-more/ReadMore.tsx",
    "displayName": "ReadMore",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content inside read more",
        "name": "children",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "Read more header content",
        "name": "header",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Opens component if 'true', closes if 'false'\nUsing this props removes automatic control of open-state",
        "name": "open",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Defaults the accordion to opened state",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "renderContentWhenClosed": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Removes content-element from dom when closed",
        "name": "renderContentWhenClosed",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/speech-bubble/Bubble.tsx",
    "displayName": "Bubble",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Bubble text",
        "name": "children",
        "parent": {
          "fileName": "src/speech-bubble/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "topText": {
        "defaultValue": null,
        "description": "User defined toptext, normally \"name + date\"",
        "name": "topText",
        "parent": {
          "fileName": "src/speech-bubble/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "backgroundColor": {
        "defaultValue": null,
        "description": "Background color bubble",
        "name": "backgroundColor",
        "parent": {
          "fileName": "src/speech-bubble/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/speech-bubble/SpeechBubble.tsx",
    "displayName": "SpeechBubble",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Children of type <Bubble />",
        "name": "children",
        "parent": {
          "fileName": "src/speech-bubble/SpeechBubble.tsx",
          "name": "SpeechBubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/SpeechBubble.tsx",
            "name": "SpeechBubbleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "topText": {
        "defaultValue": null,
        "description": "Top text for personalia and date",
        "name": "topText",
        "parent": {
          "fileName": "src/speech-bubble/SpeechBubble.tsx",
          "name": "SpeechBubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/SpeechBubble.tsx",
            "name": "SpeechBubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "illustration": {
        "defaultValue": null,
        "description": "Illustration for messenger",
        "name": "illustration",
        "parent": {
          "fileName": "src/speech-bubble/SpeechBubble.tsx",
          "name": "SpeechBubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/SpeechBubble.tsx",
            "name": "SpeechBubbleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "backgroundColor": {
        "defaultValue": null,
        "description": "Background color bubbles",
        "name": "backgroundColor",
        "parent": {
          "fileName": "src/speech-bubble/SpeechBubble.tsx",
          "name": "SpeechBubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/SpeechBubble.tsx",
            "name": "SpeechBubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "illustrationBgColor": {
        "defaultValue": null,
        "description": "Background color for illustration",
        "name": "illustrationBgColor",
        "parent": {
          "fileName": "src/speech-bubble/SpeechBubble.tsx",
          "name": "SpeechBubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/SpeechBubble.tsx",
            "name": "SpeechBubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "position": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Positions illustration and Speechbubbles",
        "name": "position",
        "parent": {
          "fileName": "src/speech-bubble/SpeechBubble.tsx",
          "name": "SpeechBubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/speech-bubble/SpeechBubble.tsx",
            "name": "SpeechBubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/step-indicator/Step.tsx",
    "displayName": "StepIndicatorStepComponent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Text content under indicator",
        "name": "children",
        "parent": {
          "fileName": "src/step-indicator/Step.tsx",
          "name": "StepIndicatorStepProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/Step.tsx",
            "name": "StepIndicatorStepProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables interaction with element",
        "name": "disabled",
        "parent": {
          "fileName": "src/step-indicator/Step.tsx",
          "name": "StepIndicatorStepProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/Step.tsx",
            "name": "StepIndicatorStepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Handled by StepIndicator",
        "name": "index",
        "parent": {
          "fileName": "src/step-indicator/Step.tsx",
          "name": "StepIndicatorStepProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/Step.tsx",
            "name": "StepIndicatorStepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/step-indicator/StepIndicator.tsx",
    "displayName": "StepIndicator",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<StepIndicator.Step /> elements",
        "name": "children",
        "parent": {
          "fileName": "src/step-indicator/StepIndicator.tsx",
          "name": "StepIndicatorProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/StepIndicator.tsx",
            "name": "StepIndicatorProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Adds classname to wrapper",
        "name": "className",
        "parent": {
          "fileName": "src/step-indicator/StepIndicator.tsx",
          "name": "StepIndicatorProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/StepIndicator.tsx",
            "name": "StepIndicatorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeStep": {
        "defaultValue": null,
        "description": "Current active step index",
        "name": "activeStep",
        "parent": {
          "fileName": "src/step-indicator/StepIndicator.tsx",
          "name": "StepIndicatorProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/StepIndicator.tsx",
            "name": "StepIndicatorProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onStepChange": {
        "defaultValue": null,
        "description": "Callback for clicked step index",
        "name": "onStepChange",
        "parent": {
          "fileName": "src/step-indicator/StepIndicator.tsx",
          "name": "StepIndicatorProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/StepIndicator.tsx",
            "name": "StepIndicatorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((step: number) => void)"
        }
      },
      "hideLabels": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Hides labels for each step if true",
        "name": "hideLabels",
        "parent": {
          "fileName": "src/step-indicator/StepIndicator.tsx",
          "name": "StepIndicatorProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/StepIndicator.tsx",
            "name": "StepIndicatorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "responsive": {
        "defaultValue": null,
        "description": "enables `hideLabels` internally when steps start to overflow.\n@note declaring `hideLabels` overwrites this functionality",
        "name": "responsive",
        "parent": {
          "fileName": "src/step-indicator/StepIndicator.tsx",
          "name": "StepIndicatorProps"
        },
        "declarations": [
          {
            "fileName": "src/step-indicator/StepIndicator.tsx",
            "name": "StepIndicatorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLOListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/stepper/Step.tsx",
    "displayName": "StepComponent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Text content under indicator",
        "name": "children",
        "parent": {
          "fileName": "src/stepper/Step.tsx",
          "name": "StepperStepProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Step.tsx",
            "name": "StepperStepProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "index": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Handled by Stepper",
        "name": "index",
        "parent": {
          "fileName": "src/stepper/Step.tsx",
          "name": "StepperStepProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Step.tsx",
            "name": "StepperStepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/stepper/Stepper.tsx",
    "displayName": "Stepper",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<Stepper.Step /> elements",
        "name": "children",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Adds classname to wrapper",
        "name": "className",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeStep": {
        "defaultValue": null,
        "description": "Current active step index",
        "name": "activeStep",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onStepChange": {
        "defaultValue": null,
        "description": "Callback for clicked step index",
        "name": "onStepChange",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((step: number) => void)"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLOListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Body.tsx",
    "displayName": "Body",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableSectionElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/ColumnHeader.tsx",
    "displayName": "ColumnHeader",
    "props": {
      "sortKey": {
        "defaultValue": null,
        "description": "Key to sort by",
        "name": "sortKey",
        "parent": {
          "fileName": "src/table/ColumnHeader.tsx",
          "name": "ColumnHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ColumnHeader.tsx",
            "name": "ColumnHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sortable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Column is sortable",
        "name": "sortable",
        "parent": {
          "fileName": "src/table/ColumnHeader.tsx",
          "name": "ColumnHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ColumnHeader.tsx",
            "name": "ColumnHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "scope": {
        "defaultValue": null,
        "description": "",
        "name": "scope",
        "parent": {
          "fileName": "react/src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "react/src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "align": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Content alignment",
        "name": "align",
        "parent": {
          "fileName": "react/src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "react/src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"center\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableCellElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/DataCell.tsx",
    "displayName": "DataCell",
    "props": {
      "align": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Content alignment",
        "name": "align",
        "parent": {
          "fileName": "src/table/DataCell.tsx",
          "name": "DataCellProps"
        },
        "declarations": [
          {
            "fileName": "src/table/DataCell.tsx",
            "name": "DataCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"center\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableCellElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/ExpandableRow.tsx",
    "displayName": "ExpandableRow",
    "props": {
      "content": {
        "defaultValue": null,
        "description": "Content of the expanded row",
        "name": "content",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "togglePlacement": {
        "defaultValue": {
          "value": "left"
        },
        "description": "Placement of toggle button",
        "name": "togglePlacement",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Opens component if 'true', closes if 'false'\nUsing this props removes automatic control of open-state",
        "name": "open",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Opened state default",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "Change handler for open",
        "name": "onOpenChange",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((open: boolean) => void)"
        }
      },
      "expansionDisabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable expansion",
        "name": "expansionDisabled",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selected": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Row is selected",
        "name": "selected",
        "parent": {
          "fileName": "react/src/table/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "react/src/table/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableRowElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Header.tsx",
    "displayName": "Header",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableSectionElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/HeaderCell.tsx",
    "displayName": "HeaderCell",
    "props": {
      "scope": {
        "defaultValue": null,
        "description": "",
        "name": "scope",
        "parent": {
          "fileName": "src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "align": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Content alignment",
        "name": "align",
        "parent": {
          "fileName": "src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"center\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableCellElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Row.tsx",
    "displayName": "Row",
    "props": {
      "selected": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Row is selected",
        "name": "selected",
        "parent": {
          "fileName": "src/table/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableRowElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Table.tsx",
    "displayName": "Table",
    "props": {
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding",
        "name": "size",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "zebraStripes": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Zebra striped table",
        "name": "zebraStripes",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sort": {
        "defaultValue": null,
        "description": "Sort state",
        "name": "sort",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SortState"
        }
      },
      "onSortChange": {
        "defaultValue": null,
        "description": "Callback whens sort state changes",
        "name": "onSortChange",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((sortKey?: string) => void)"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/Tab.tsx",
    "displayName": "Tab",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Content",
        "name": "label",
        "parent": {
          "fileName": "src/tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon",
        "name": "icon",
        "parent": {
          "fileName": "src/tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for state-handling",
        "name": "value",
        "parent": {
          "fileName": "src/tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Icon position",
        "name": "iconPosition",
        "parent": {
          "fileName": "src/tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"top\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/TabList.tsx",
    "displayName": "TabList",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Tab elements",
        "name": "children",
        "parent": {
          "fileName": "src/tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "loop": {
        "defaultValue": null,
        "description": "Loops back to start when navigating past last item",
        "name": "loop",
        "parent": {
          "fileName": "src/tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/TabPanel.tsx",
    "displayName": "TabPanel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Tab panel",
        "name": "children",
        "parent": {
          "fileName": "src/tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for state-handling",
        "name": "value",
        "parent": {
          "fileName": "src/tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/Tabs.tsx",
    "displayName": "Tabs",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Tabs elements",
        "name": "children",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange",
        "name": "onChange",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string) => void)"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled selected value",
        "name": "value",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "If not controlled, a default-value needs to be set",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selectionFollowsFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Automatically activates tab on focus/navigation",
        "name": "selectionFollowsFocus",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tag/Tag.tsx",
    "displayName": "Tag",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Tag",
        "name": "children",
        "parent": {
          "fileName": "src/tag/Tag.tsx",
          "name": "TagProps"
        },
        "declarations": [
          {
            "fileName": "src/tag/Tag.tsx",
            "name": "TagProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Changes background-color and border-color",
        "name": "variant",
        "parent": {
          "fileName": "src/tag/Tag.tsx",
          "name": "TagProps"
        },
        "declarations": [
          {
            "fileName": "src/tag/Tag.tsx",
            "name": "TagProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"warning\" | \"error\" | \"info\" | \"success\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes sizing of tag",
        "name": "size",
        "parent": {
          "fileName": "src/tag/Tag.tsx",
          "name": "TagProps"
        },
        "declarations": [
          {
            "fileName": "src/tag/Tag.tsx",
            "name": "TagProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLSpanElement>"
        }
      }
    }
  },
  {
    "filePath": "src/toggle-group/ToggleGroup.tsx",
    "displayName": "ToggleGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Toggles.Item elements",
        "name": "children",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled selected value",
        "name": "value",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "If not controlled, a default-value needs to be set",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Returns elements that wants to be active",
        "name": "onChange",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label describing ToggleGroup",
        "name": "label",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/toggle-group/ToggleItem.tsx",
    "displayName": "ToggleItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content",
        "name": "children",
        "parent": {
          "fileName": "src/toggle-group/ToggleItem.tsx",
          "name": "ToggleItemProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleItem.tsx",
            "name": "ToggleItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for state-handling",
        "name": "value",
        "parent": {
          "fileName": "src/toggle-group/ToggleItem.tsx",
          "name": "ToggleItemProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleItem.tsx",
            "name": "ToggleItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tooltip/Tooltip.tsx",
    "displayName": "Tooltip",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Element tooltip anchors to",
        "name": "children",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> & RefAttributes<HTMLElement>"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Open state for contolled tooltip",
        "name": "open",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Tells tooltip to start in open state\n@note \"open\"-prop overwrites this",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "\"top\""
        },
        "description": "Orientation for tooltip",
        "name": "placement",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"right\" | \"bottom\" | \"left\""
        }
      },
      "arrow": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles rendering of arrow",
        "name": "arrow",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "offset": {
        "defaultValue": {
          "value": "10px with arrow, 2px without arrow"
        },
        "description": "Distance from anchor to tooltip",
        "name": "offset",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "Content shown in tooltip",
        "name": "content",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "maxChar": {
        "defaultValue": {
          "value": "80"
        },
        "description": "Sets max allowed character length",
        "name": "maxChar",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "delay": {
        "defaultValue": {
          "value": "150"
        },
        "description": "Adds a delay in milliseconds before opening tooltip",
        "name": "delay",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "keys": {
        "defaultValue": null,
        "description": "List of Keyboard-keys for shortcuts",
        "name": "keys",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tooltip/portal.tsx",
    "displayName": "portal",
    "props": {}
  },
  {
    "filePath": "src/typography/BodyLong.tsx",
    "displayName": "BodyLong",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "medium: 18px, small: 16px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/BodyLong.tsx",
          "name": "BodyLongProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyLong.tsx",
            "name": "BodyLongProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Paragraph text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/BodyLong.tsx",
          "name": "BodyLongProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyLong.tsx",
            "name": "BodyLongProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds margins to typo",
        "name": "spacing",
        "parent": {
          "fileName": "src/typography/BodyLong.tsx",
          "name": "BodyLongProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyLong.tsx",
            "name": "BodyLongProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/BodyShort.tsx",
    "displayName": "BodyShort",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "medium: 18px, small: 16px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/BodyShort.tsx",
          "name": "BodyShortProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyShort.tsx",
            "name": "BodyShortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Paragraph text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/BodyShort.tsx",
          "name": "BodyShortProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyShort.tsx",
            "name": "BodyShortProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds margins to typo",
        "name": "spacing",
        "parent": {
          "fileName": "src/typography/BodyShort.tsx",
          "name": "BodyShortProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyShort.tsx",
            "name": "BodyShortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Detail.tsx",
    "displayName": "Detail",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "medium: 14px bold, small: 14px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/Detail.tsx",
          "name": "DetailProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Detail.tsx",
            "name": "DetailProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Paragraph text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Detail.tsx",
          "name": "DetailProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Detail.tsx",
            "name": "DetailProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds margins to typo",
        "name": "spacing",
        "parent": {
          "fileName": "src/typography/Detail.tsx",
          "name": "DetailProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Detail.tsx",
            "name": "DetailProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Heading.tsx",
    "displayName": "Heading",
    "props": {
      "level": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Heading level",
        "name": "level",
        "parent": {
          "fileName": "src/typography/Heading.tsx",
          "name": "HeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Heading.tsx",
            "name": "HeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Sizes from largest \"2xl\" to smallest \"s\"",
        "name": "size",
        "parent": {
          "fileName": "src/typography/Heading.tsx",
          "name": "HeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Heading.tsx",
            "name": "HeadingProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"xlarge\" | \"large\" | \"medium\" | \"small\" | \"xsmall\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Heading text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Heading.tsx",
          "name": "HeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Heading.tsx",
            "name": "HeadingProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Adds margins to typo",
        "name": "spacing",
        "parent": {
          "fileName": "src/typography/Heading.tsx",
          "name": "HeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Heading.tsx",
            "name": "HeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Ingress.tsx",
    "displayName": "Ingress",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Ingress text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Ingress.tsx",
          "name": "IngressProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Ingress.tsx",
            "name": "IngressProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds margins to typo",
        "name": "spacing",
        "parent": {
          "fileName": "src/typography/Ingress.tsx",
          "name": "IngressProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Ingress.tsx",
            "name": "IngressProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Label.tsx",
    "displayName": "Label",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "medium: 18px, small: 16px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/Label.tsx",
          "name": "LabelProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Label.tsx",
            "name": "LabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Paragraph text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Label.tsx",
          "name": "LabelProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Label.tsx",
            "name": "LabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds margins to typo",
        "name": "spacing",
        "parent": {
          "fileName": "src/typography/Label.tsx",
          "name": "LabelProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Label.tsx",
            "name": "LabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Fieldset/Fieldset.tsx",
    "displayName": "Fieldset",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "FormFields in Fieldset",
        "name": "children",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Fieldset legend",
        "name": "legend",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLegend": {
        "defaultValue": null,
        "description": "If enabled shows the legend and description for screenreaders only",
        "name": "hideLegend",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "errorPropagation": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles error propagation to child-elements",
        "name": "errorPropagation",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLFieldSetElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/checkbox/Checkbox.tsx",
    "displayName": "Checkbox",
    "props": {
      "error": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Checkbox has error",
        "name": "error",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Label for checkbox",
        "name": "children",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "Hides label and makes it viewable for screen-readers only.",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the HTML element.",
        "name": "value",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "indeterminate": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Specify whether the Checkbox is in an indeterminate state",
        "name": "indeterminate",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/checkbox/CheckboxGroup.tsx",
    "displayName": "CheckboxGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Checkboxes",
        "name": "children",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled state for group",
        "name": "value",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default checked checkboxes on render",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "onChange": {
        "defaultValue": {
          "value": "() => {}"
        },
        "description": "Returns current checked checkboxes in group",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: any[]) => void)"
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Fieldset legend",
        "name": "legend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLegend": {
        "defaultValue": null,
        "description": "If enabled shows the legend and description for screenreaders only",
        "name": "hideLegend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLFieldSetElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/error-summary/ErrorSummary.tsx",
    "displayName": "ErrorSummary",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "ErrorSummaryItems",
        "name": "children",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding and font-sizes",
        "name": "size",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "Heading above links",
        "name": "heading",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "headingTag": {
        "defaultValue": {
          "value": "\"h2\""
        },
        "description": "Allows setting a different HTML <tag>",
        "name": "headingTag",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementType<any>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/error-summary/ErrorSummaryItem.tsx",
    "displayName": "ErrorSummaryItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Link text",
        "name": "children",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummaryItem.tsx",
          "name": "ErrorSummaryItemProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummaryItem.tsx",
            "name": "ErrorSummaryItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/radio/Radio.tsx",
    "displayName": "Radio",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Label for radio",
        "name": "children",
        "parent": {
          "fileName": "src/form/radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the HTML element",
        "name": "value",
        "parent": {
          "fileName": "src/form/radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/radio/RadioGroup.tsx",
    "displayName": "RadioGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collection of <Radio>-elements",
        "name": "children",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Override internal name",
        "name": "name",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default checked radiobutton",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled state for Radiobutton",
        "name": "value",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "onChange": {
        "defaultValue": {
          "value": "() => {}"
        },
        "description": "Returns current checked radiobutton in group",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: any) => void)"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Tells Fieldset if group is required",
        "name": "required",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Fieldset legend",
        "name": "legend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLegend": {
        "defaultValue": null,
        "description": "If enabled shows the legend and description for screenreaders only",
        "name": "hideLegend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLFieldSetElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/search/Search.tsx",
    "displayName": "Search",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Search label\n@info Will be hidden by default, is required for accessibility reasons.",
        "name": "label",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Shows label and description for screenreaders-only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback for value-change in input",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string) => void)"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Callback for click on clear-button or Escape keydown",
        "name": "onClear",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((e: SearchClearEvent) => void)"
        }
      },
      "clearButtonLabel": {
        "defaultValue": {
          "value": "\"Tøm\""
        },
        "description": "aria-label on clear button",
        "name": "clearButtonLabel",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If false, removes clear-button option from input.",
        "name": "clearButton",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"primary\""
        },
        "description": "Changes button-variant",
        "name": "variant",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"simple\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/search/SearchButton.tsx",
    "displayName": "SearchButton",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Text set before <Search/> icon",
        "name": "children",
        "parent": {
          "fileName": "src/form/search/SearchButton.tsx",
          "name": "SearchButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/SearchButton.tsx",
            "name": "SearchButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Prevent the user from interacting with the button: it cannot be pressed or focused.\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Replaces button content with a Loader component, keeps width",
        "name": "loading",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "parent": {
          "fileName": "nfm/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "nfm/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  }
]
