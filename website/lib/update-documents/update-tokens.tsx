import css from "css";
import { readFileSync } from "fs";
import dotenv from "dotenv";
import { noCdnClient } from "../sanity/sanity.server";

dotenv.config();

type TokenEntryT = {
  title: string;
  color: string;
};

const cssData = readFileSync(
  "../node_modules/@navikt/ds-tokens/dist/tokens.css"
);

const parsed = css.parse(cssData.toString());
const root = parsed.stylesheet.rules.find((r) =>
  r.selectors?.includes(":root")
);

const getGlobalToken = (value: string): string | null => {
  const parsedValue = value.replace("var(", "").replace(")", "");
  return (
    root.declarations.find((x) => x.property === parsedValue).value ?? null
  );
};

const tokens: TokenEntryT[] = root.declarations.map((d) => ({
  title: d.property.replace("--navds-", ""),
  color: d.value,
  raw: d.value.startsWith("var(") ? getGlobalToken(d.value) : null,
}));

const updateTokens = async () => {
  const token = process.env.SANITY_WRITE_KEY;
  // this is our transactional client, it won't push anything until we say .commit() later
  const transactionClient = noCdnClient(token).transaction();

  // first let's fetch the current state from sanity,
  // So that we can delete old/changed tokens
  const remoteTokens = await noCdnClient(token).fetch(
    `*[_type == "ds_tokens"]`
  );

  for (const token of remoteTokens) {
    if (
      !tokens.find(
        (x) => token._id === `${x.title.replaceAll("-", "_")}_autogen_token`
      )
    )
      transactionClient.delete(token._id);
  }

  tokens.forEach((c) =>
    transactionClient.createOrReplace({
      _id: `${c.title.replaceAll("-", "_")}_autogen_token`,
      _type: "ds_tokens",
      autogenerated: true,
      ...c,
    })
  );

  await transactionClient
    .commit()
    .then(() => console.log(`Updated tokens`))
    .catch((e) => console.error(e.message));
};

updateTokens();
